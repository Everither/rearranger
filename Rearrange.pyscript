from enveditor import *

class PseudoRandom:
    def __init__(self, seed):
        self.seed = seed

    def random(self):
        self.seed = (self.seed * 1664525 + 1013904223) % 2**32
        return self.seed / 2**32

# Acquire sample rate
SAMPLE_RATE = int(EditorSample.SampleRate)

# Read and make copy of audio
audio_buffer = [[],[]]
for c in range(2):
    for i in range(EditorSample.Length):
        audio_buffer[c].append(EditorSample.GetSampleAt(i,c))

# Function for manually adding markers
def add_markers(bpm: float, division: float, pseudorandom: PseudoRandom, noise: float):
    # Acquire the number of samples in each chop
    samples_per_chop = int((SAMPLE_RATE * 60 * division) // bpm)

    for i in range(0, EditorSample.Length, samples_per_chop):
        pos = int((i + pseudorandom.random() * noise * EditorSample.Length) % EditorSample.Length)   # Optionally adding some noise to the positions of markers
        EditorSample.AddRegion('', pos, EditorSample.Length - 1)

# Function for adding head and tail markers
def add_head_tail_markers():
    # Add regions/markers to beginning and end
    EditorSample.AddRegion('', 0, 0)
    EditorSample.AddRegion('', EditorSample.Length - 1, EditorSample.Length - 1)

    # Delete duplicates
    seen_regions = []
    for i in range(EditorSample.RegionCount - 1, -1, -1):   # We need to traverse it backwards since we are potentially delete some elements
        region = EditorSample.GetRegion(i)
        if region.SampleStart in seen_regions:
            EditorSample.DeleteRegion(i)
        else:
            seen_regions.append(region.SampleStart)

# Function for reordering when markers are present
def reorder_marker(sort_key: int, direction: int, declick: int):
    if EditorSample.RegionCount <= 1:
        # If there's only one region, then no reordering needs to be done
        return

    add_head_tail_markers()

    # Make regions list
    regions = [EditorSample.GetRegion(i) for i in range(EditorSample.RegionCount)]
    
    # Sort the regions based on there starting positions
    regions.sort(key=lambda x: x.SampleStart)

    # Append tuples to a list
    # (comparison_value, i_s, i_e, region)
    # Where comparison_value is the value of average, i_s is the start index, i_e is the end index, region is the region object
    region_order = []
    for i in range(len(regions) - 1):
        current_region = regions[i]
        next_region = regions[i+1]
        
        # Choose sort mode
        if sort_key == 0:
            comparison_value = compute_peak(current_region.SampleStart, next_region.SampleStart)
        elif sort_key == 1:
            comparison_value = compute_avg_peak(current_region.SampleStart, next_region.SampleStart)
        elif sort_key == 2:
            comparison_value = compute_reverse(current_region.SampleStart, next_region.SampleStart)

        region_order.append((comparison_value, current_region.SampleStart, next_region.SampleStart, current_region))

    # Sort
    if direction == 0:  # Ascending
        region_order.sort()
    else:               # Descending
        region_order.sort(reverse=True)

    # Write the new audio
    for c in range(2):
        counter = 0
        for section in region_order:
            _, i_s, i_e, _ = section
            # Declick Head
            if i_s-declick > 0:  
                for i in range(declick):
                    EditorSample.SetSampleAt(counter-declick+i, c, EditorSample.GetSampleAt(counter-declick+i, c) + (audio_buffer[c][i_s-declick+i] * i/declick))

            # Main audio
            for i in range(i_s, i_e):
                EditorSample.SetSampleAt(counter, c, audio_buffer[c][i])
                counter += 1

            # Declick Tail
            if counter-declick+i > 0:
                for i in range(declick):
                    EditorSample.SetSampleAt(counter-declick+i, c, EditorSample.GetSampleAt(counter-declick+i, c) * (declick-i)/declick)

    # Relocate the regions/markers
    pos = 0
    for section in region_order:
        _, i_s, i_e, region = section
        region.SampleStart = pos
        pos += i_e - i_s

# ---------------------- Sort Modes ----------------------

def compute_peak(start: int, end: int) -> float:
    '''Returns the value of the sample with the max absolute value in the given period (start inclusive, end exclusive)'''
    maxx = 0
    for c in range(2):
        for i in range(start, end):
            if abs(EditorSample.GetSampleAt(i,c)) > maxx:
                maxx = abs(EditorSample.GetSampleAt(i,c))

    return maxx

def compute_avg_peak(start: int, end: int) -> float:
    '''Returns the average value of samples in the given period (start inclusive, end exclusive)'''
    summ = 0
    for c in range(2):
        for i in range(start, end):
            summ += abs(EditorSample.GetSampleAt(i,c))

    return summ / (end - start)

def compute_reverse(start: int, end: int) -> float:
    '''Returns the reciprocal of the position of the marker (start inclusive, end exclusive)'''
    return 1 / (start+1)    # Adding one here to prevent division by zero

# --------------------------------------------------------

# Form for scenario with markers
form_with_markers=ScriptDialog('Rearrange', 'Rearranges the audio based on: \r`Direction` - Ascending or descending order for arranging regions. \r`Sort By` - Criterion for sorting: Peak, Average Peak, or Reverse. \r`Declick` - Fade duration of the beginning and end of each chop.\r`Delete Markers` - Option to keep or delete markers.')
form_with_markers.AddInputCombo('Direction', 'Ascending,Descending', 0)
form_with_markers.AddInputCombo('Sort By', 'Peak,Average Peak,Reverse', 0)
form_with_markers.AddInputKnob('Declick', 20, 1, 1000)
form_with_markers.AddInputCombo('Delete Markers', 'No,Yes', 0)

# Form for scenario with no markers
form_without_markers=ScriptDialog('Rearrange - Add Markers', 'Chops the audio based on: \r`BPM` - Tempo for chopping audio. \r`Division` - Length of each region in musical time. \r`Noise` - Random offset for marker placement. \r`Seed` - Seed for pseudorandom generation.')
form_without_markers.AddInputKnob('BPM', 140, 1, 300)
form_without_markers.AddInputCombo('Division', '1 Bar,2 Beat,1 Beat,1/2 Beat,1/4 Beat,1/8 Beat,1/16 Beat', 2)
division_values = [4, 2, 1, 0.5, 0.25, 0.125, 0.0625]       # Corresponding values for 'Division' input
form_without_markers.AddInputKnob('Noise', 0, 0, 1)
form_without_markers.AddInputKnob('Seed', 1, 1, 1000)


def main():
    if EditorSample.RegionCount == 0:   # No markers/regions yet
        if form_without_markers.Execute():

            bpm = form_without_markers.GetInputValue('BPM')
            division = division_values[int(form_without_markers.GetInputValue('Division'))]
            noise = form_without_markers.GetInputValue('Noise')
            seed = form_without_markers.GetInputValue('Seed')

            pseudorandom = PseudoRandom(seed)

            add_markers(bpm, division, pseudorandom, noise)

        else:
            return

    if form_with_markers.Execute():

        sort_key = form_with_markers.GetInputValue('Sort By')
        direction = form_with_markers.GetInputValue('Direction')
        declick = int(form_with_markers.GetInputValue('Declick'))

        reorder_marker(sort_key, direction, declick)

        # Delete all regions/markers
        if form_with_markers.GetInputValue('Delete Markers') == 1:
            for _ in range(EditorSample.RegionCount):
                EditorSample.DeleteRegion(0)

main()
